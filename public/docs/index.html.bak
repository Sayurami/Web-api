<!DOCTYPE html>  
<html lang="en">  
<head>  
    <meta charset="UTF-8">  
    <meta name="viewport" content="width=device-width, initial-scale=1.0">  
    <title>VCF Contact Session | Powered by David Cyril</title>  
    <link rel="stylesheet" href="https://david-cyril.net.ng/css/remini.css">  
    <style>  
        /* Centering and Styling */  
        body {  
            display: flex;  
            justify-content: center;  
            align-items: center;  
            height: 100vh;  
            background: url('https://files.catbox.moe/jd0s4p.jpg') no-repeat center center/cover;  
            font-family: Arial, sans-serif;  
            text-align: center;  
            color: white;  
        }  
        .container {  
            background: rgba(0, 0, 0, 0.7);  
            padding: 20px;  
            border-radius: 10px;  
            box-shadow: 0px 0px 10px rgba(255, 255, 255, 0.2);  
        }  

        h1 { color: #00C1FF; }  

        input, button {  
            width: 100%;  
            padding: 10px;  
            margin: 10px 0;  
            border-radius: 5px;  
            border: none;  
            font-size: 16px;  
        }  

        input {  
            background: rgba(255, 255, 255, 0.1);  
            color: white;  
        }  

        input::placeholder { color: rgba(255, 255, 255, 0.7); }  

        button {  
            background: #007BFF;  
            color: white;  
            cursor: pointer;  
            transition: 0.3s;  
        }  

        button:hover { background: #0056b3; }  

        /* Loader */  
        .loader {  
            display: none;  
            margin: 20px auto;  
            width: 40px;  
            height: 40px;  
            border: 4px solid rgba(255, 255, 255, 0.1);  
            border-left-color: #00C1FF;  
            border-radius: 50%;  
            animation: spin 1s linear infinite;  
        }  

        @keyframes spin {  
            0% { transform: rotate(0deg); }  
            100% { transform: rotate(360deg); }  
        }  

        /* Checkmark Animation */  
        .checkmark {  
            display: none;  
            font-size: 30px;  
            color: #28a745;  
            margin-top: 10px;  
            opacity: 0;  
            transition: opacity 0.5s ease-in-out;  
        }  

        /* Show checkmark animation */  
        .show-checkmark {  
            display: block;  
            opacity: 1;  
        }  

        /* Download Button */  
        #downloadSection {  
            display: none;  
            margin-top: 20px;  
        }  

        #downloadLink {  
            display: inline-block;  
            padding: 12px 20px;  
            background: #28a745;  
            color: white;  
            font-size: 16px;  
            border-radius: 5px;  
            text-decoration: none;  
            transition: 0.3s;  
        }  

        #downloadLink:hover { background: #218838; }  
    </style>  
</head>  
<body>  
    <div class="container">  
        <h1 id="groupName">Loading...</h1>  
        <p>Time Left: <span id="countdown">--:--</span></p>  
        <form id="contactForm">  
            <input type="text" id="name" placeholder="Your Name" required>  
            <input type="text" id="phone" placeholder="+234XXXXXXXXXX" required>  
            <button type="submit">Add Contact</button>  
        </form>  

        <!-- Loader -->  
        <div class="loader" id="loader"></div>  

        <!-- Checkmark Animation -->  
        <div class="checkmark" id="checkmark">✅</div>  

        <!-- Download VCF -->  
        <div id="downloadSection">  
            <p>Session Ended. Download the contact list below:</p>  
            <a id="downloadLink" href="#">Download VCF</a>  
        </div>  

        <p class="powered">ᴍᴀᴅᴇ ʙʏ ᴅᴀᴠɪᴅ ᴄʏʀɪʟ</p>  
    </div>  

    <script>  
        const sessionId = window.location.pathname.split('/').pop();  
        let countdownInterval;  

        async function fetchSession() {  
            try {  
                const response = await fetch(`/session-data/${sessionId}`);  
                const data = await response.json();  

                if (data.error) {  
                    document.body.innerHTML = "<h1>Session Not Found or Expired</h1>";  
                    return;  
                }  

                document.getElementById('groupName').textContent = data.groupName;  

                if (data.timeLeft > 0) {  
                    updateCountdown(data.timeLeft);  
                } else {  
                    endSessionUI();  
                }  
            } catch (error) {  
                console.error("Error fetching session:", error);  
            }  
        }  

        function updateCountdown(timeLeft) {  
            clearInterval(countdownInterval);  
            const countdownElement = document.getElementById('countdown');  

            countdownInterval = setInterval(() => {  
                if (timeLeft <= 0) {  
                    clearInterval(countdownInterval);  
                    endSessionUI();  
                    return;  
                }  

                const minutes = Math.floor(timeLeft / 60000);  
                const seconds = Math.floor((timeLeft % 60000) / 1000);  
                countdownElement.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;  
                timeLeft -= 1000;  
            }, 1000);  
        }  

        function endSessionUI() {  
            document.getElementById('countdown').textContent = "Session Ended";  
            document.getElementById('contactForm').style.display = 'none';  
            document.getElementById('loader').style.display = 'none';  
            document.getElementById('downloadSection').style.display = 'block';  
            document.getElementById('downloadLink').href = `/session/${sessionId}/contacts.vcf`;  
        }  

        document.getElementById('contactForm').addEventListener('submit', async function(event) {  
            event.preventDefault();  

            const name = document.getElementById('name').value.trim();  
            const phone = document.getElementById('phone').value.trim();  

            if (!/^\+\d{11,15}$/.test(phone)) {  
                alert("Invalid phone number format. Use +234XXXXXXXXXX.");  
                return;  
            }  

            document.getElementById('loader').style.display = "block";  

            try {  
                await fetch(`/session/${sessionId}/add-contact`, {  
                    method: 'POST',  
                    headers: { 'Content-Type': 'application/json' },  
                    body: JSON.stringify({ name, phone })  
                });  

                document.getElementById('name').value = "";  
                document.getElementById('phone').value = "";  
                document.getElementById('loader').style.display = "none";  

                // Show Checkmark Animation  
                const checkmark = document.getElementById('checkmark');  
                checkmark.classList.add('show-checkmark');  
                setTimeout(() => checkmark.classList.remove('show-checkmark'), 2000);  

            } catch (error) {  
                console.error("Error adding contact:", error);  
                alert("Failed to add contact, please try again.");  
                document.getElementById('loader').style.display = "none";  
            }  
        });  

        fetchSession();  
    </script>  
</body>  
</html>